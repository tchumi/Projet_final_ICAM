"""
Ce script effectue le suivi des clusters des √©lections au fil du temps en utilisant l'algorithme de K-means et l'algorithme de Hongrois pour stabiliser les labels des clusters.
Fonctionnalit√©s principales :
1. Chargement des donn√©es d'√©lections depuis un fichier CSV.
2. S√©lection des colonnes pertinentes pour l'analyse.
3. Cr√©ation des matrices de transition entre les diff√©rentes ann√©es d'√©lections.
4. Utilisation de l'algorithme de Hongrois pour stabiliser les labels des clusters entre les ann√©es.
5. Application des labels corrig√©s dans le dataframe.
6. Enregistrement du fichier mis √† jour avec les clusters stabilis√©s.
7. Visualisation des flux de clusters avec un diagramme de Sankey (si plotly est install√©).
Modules requis :
- pandas
- numpy
- matplotlib.pyplot
- seaborn
- scipy.optimize.linear_sum_assignment
- plotly.graph_objects (optionnel pour la visualisation Sankey)
Variables :
- DATA_PATH : Chemin vers le fichier CSV contenant les donn√©es d'√©lections.
- df : DataFrame contenant les donn√©es charg√©es.
- elections : Liste des ann√©es d'√©lections pr√©sentes dans les donn√©es.
- transition_matrices : Dictionnaire stockant les matrices de transition entre les ann√©es d'√©lections.
- cluster_mapping : Dictionnaire stockant la correspondance des clusters entre les ann√©es d'√©lections.
- OUTPUT_PATH : Chemin vers le fichier CSV de sortie avec les clusters stabilis√©s.
Fonctions :
- match_clusters(matrix) : Utilise l'algorithme de Hongrois pour trouver la correspondance optimale des clusters entre deux ann√©es.

"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import linear_sum_assignment

# üìå Chemin des donn√©es
DATA_PATH = "C:/Users/Admin.local/Documents/Projet_final_data/Piketty_data/elections_fusionnees_cleaned_with_names_clusters.csv"
OUTPUT_PATH = "C:/Users/Admin.local/Documents/Projet_final_data/Piketty_data/elections_fusionnees_tracking_1er_tour.csv"
REPORT_PATH = "C:/Users/Admin.local/Documents/Projet_final_data/Piketty_data/rapport_tracking_cluster_tour_1.txt"

# üìå Chargement des donn√©es
df = pd.read_csv(DATA_PATH, sep=",", dtype={"codecommune": str})

# üìå S√©lection des colonnes pertinentes
# df = df[["codecommune", "ann√©e", "cluster_1er_tour"]]

# üìå Liste des √©lections
elections = sorted(df["ann√©e"].unique())
transition_matrices = {}

# üìå Ouverture du rapport pour l'enregistrement de la sortie
with open(REPORT_PATH, "w", encoding="utf-8") as report:
    
    # üìå Cr√©ation de la matrice de transition
    for i in range(len(elections) - 1):
        year_prev = elections[i]
        year_next = elections[i + 1]

        # üìå S√©lection des communes pr√©sentes aux deux √©lections
        df_prev = df[df["ann√©e"] == year_prev].set_index("codecommune")
        df_next = df[df["ann√©e"] == year_next].set_index("codecommune")

        common_communes = df_prev.index.intersection(df_next.index)

        df_prev = df_prev.loc[common_communes]
        df_next = df_next.loc[common_communes]

        # üìå Construction de la matrice de transition
        transition_matrix = pd.crosstab(df_prev["cluster_1er_tour"], df_next["cluster_1er_tour"], normalize="index")

        # üìå Sauvegarde de la matrice
        transition_matrices[(year_prev, year_next)] = transition_matrix

        # üìå √âcriture du rapport
        report.write(f"üìä Matrice de transition {year_prev} ‚Üí {year_next}\n")
        report.write(transition_matrix.to_string() + "\n\n")

    # üìå Algorithme de Hongrois pour stabiliser les labels des clusters
    def match_clusters(matrix):
        cost_matrix = -matrix.values  # On minimise le co√ªt donc on met des valeurs n√©gatives
        row_ind, col_ind = linear_sum_assignment(cost_matrix)
        return dict(zip(matrix.index[row_ind], matrix.columns[col_ind]))

    # üìå Cr√©ation du mapping des clusters dans le temps
    cluster_mapping = {}

    for (year_prev, year_next), matrix in transition_matrices.items():
        mapping = match_clusters(matrix)
        cluster_mapping[(year_prev, year_next)] = mapping

    # üìå Enregistrement des correspondances dans le rapport
    report.write("\nüìå Correspondance des clusters entre √©lections :\n")
    for k, v in cluster_mapping.items():
        report.write(f"{k} : {v}\n")

# üìå Application des labels corrig√©s dans le dataframe
df["cluster_corrige_1er_tour"] = df["cluster_1er_tour"]

for (year_prev, year_next), mapping in cluster_mapping.items():
    df.loc[df["ann√©e"] == year_next, "cluster_corrige_1er_tour"] = df.loc[df["ann√©e"] == year_next, "cluster_1er_tour"].replace(mapping)

# üìå Enregistrement du fichier mis √† jour
df.to_csv(OUTPUT_PATH, index=False)

print(f"‚úÖ Fichier sauvegard√© avec clusters stabilis√©s : {OUTPUT_PATH}")
print(f"üìÑ Rapport g√©n√©r√© : {REPORT_PATH}")

# üìå Visualisation des flux avec Sankey Diagram
try:
    import plotly.graph_objects as go

    links = []
    for (year_prev, year_next), matrix in transition_matrices.items():
        for c1, c2 in matrix.stack().index:
            value = matrix.loc[c1, c2]
            if value > 0.05:  # Filtrer les flux faibles
                links.append({
                    "source": f"{year_prev}-{c1}",
                    "target": f"{year_next}-{c2}",
                    "value": value
                })

    nodes = list(set([link["source"] for link in links] + [link["target"] for link in links]))
    node_indices = {node: i for i, node in enumerate(nodes)}

    sankey_fig = go.Figure(go.Sankey(
        node=dict(
            pad=15, thickness=20, line=dict(color="black", width=0.5),
            label=nodes
        ),
        link=dict(
            source=[node_indices[link["source"]] for link in links],
            target=[node_indices[link["target"]] for link in links],
            value=[link["value"] for link in links]
        )
    ))

    sankey_fig.update_layout(title_text="√âvolution des Clusters du 1er Tour", font_size=10)
    sankey_fig.show()

except ImportError:
    print("‚ö†Ô∏è plotly non install√© : graphique Sankey non g√©n√©r√©.")