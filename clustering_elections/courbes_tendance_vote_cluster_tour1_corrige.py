""""
Ce script analyse les tendances de vote par cluster pour le premier tour des √©lections en utilisant des moyennes pond√©r√©es. 
Il charge les donn√©es √©lectorales, calcule les moyennes pond√©r√©es des votes pour chaque cluster et ann√©e, 
et g√©n√®re des graphiques pour visualiser l'√©volution des votes par cluster.
Fonctionnalit√©s :
- Chargement des donn√©es √©lectorales √† partir d'un fichier CSV.
- S√©lection des colonnes √©lectorales pertinentes.
- Calcul des moyennes pond√©r√©es des votes par cluster et ann√©e.
- Cr√©ation de sous-graphiques pour chaque tendance de vote (Gauche, Centre, Droite).
- Affichage des graphiques avec des titres, l√©gendes et grilles.
Biblioth√®ques utilis√©es :
- pandas : pour la manipulation des donn√©es.
- matplotlib.pyplot : pour la cr√©ation des graphiques.
- seaborn : pour l'am√©lioration de l'esth√©tique des graphiques.
- os : pour la gestion des chemins de fichiers.
Variables :
- DATA_DIR : Chemin du r√©pertoire contenant les donn√©es √©lectorales.
- ELECTIONS_FILE : Chemin complet du fichier CSV des √©lections.
- df_votes : DataFrame contenant les donn√©es √©lectorales charg√©es.
- variables_votes : Dictionnaire des colonnes √©lectorales s√©lectionn√©es et leurs titres.
- ponderation : Colonne utilis√©e pour le calcul des moyennes pond√©r√©es.
- df_trends : DataFrame contenant les moyennes pond√©r√©es des votes par cluster et ann√©e.

"""


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# üìç Chemin du fichier des √©lections
DATA_DIR = "C:/Users/Admin.local/Documents/Projet_final_data/Piketty_data"
ELECTIONS_FILE = os.path.join(DATA_DIR, "elections_fusionnees_tracking_1er_tour.csv")

# üìå Chargement du fichier
df_votes = pd.read_csv(ELECTIONS_FILE, sep=",", dtype={"codecommune": str})

# üìå S√©lection des colonnes √©lectorales
variables_votes = {
    "pvoteG": "Vote Gauche",
    "pvoteC": "Vote Centre",
    "pvoteD": "Vote Droite"
}
ponderation = "exprimes"  # Poids bas√© sur les votes exprim√©s

# üìå Calcul des moyennes pond√©r√©es des votes par cluster et ann√©e
def weighted_mean(df_grouped, var):
    return (df_grouped[var] * df_grouped[ponderation]).sum() / df_grouped[ponderation].sum()

df_trends = df_votes.groupby(["ann√©e", "cluster_corrige_1er_tour"], as_index=False, group_keys=False).apply(
    lambda x: pd.Series({var: weighted_mean(x, var) for var in variables_votes.keys()})
)

# üìå Cr√©ation des sous-graphiques pour chaque tendance
fig, axes = plt.subplots(1, 3, figsize=(18, 6), sharex=True, sharey=True)

for ax, (var, title) in zip(axes, variables_votes.items()):
    sns.lineplot(data=df_trends, x="ann√©e", y=var, hue="cluster_corrige_1er_tour", marker="o", ax=ax, palette="tab10")
    ax.set_title(title)
    ax.set_xlabel("Ann√©e")
    ax.set_ylabel("Pourcentage moyen du vote")
    ax.legend(title="Cluster", loc="upper right")
    ax.grid(True)

# üìå Ajustement des espaces entre les graphiques
plt.suptitle("√âvolution des votes par cluster (moyennes pond√©r√©es)", fontsize=16)
plt.tight_layout()
plt.show()
