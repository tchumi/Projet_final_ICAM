"""
Ce script analyse les poids relatifs des clusters de communes au fil des √©lections en France.
Fonctionnalit√©s :
1. Chargement des donn√©es de clusters et des r√©sultats des √©lections.
2. Fusion des donn√©es pour r√©cup√©rer les votes exprim√©s par commune et par ann√©e.
3. Calcul des poids relatifs des clusters en termes de nombre de communes et de votes exprim√©s.
4. Sauvegarde des r√©sultats dans un fichier CSV.
5. Visualisation des tendances des poids relatifs des clusters au fil des ann√©es.
Biblioth√®ques utilis√©es :
- pandas : pour la manipulation des donn√©es.
- os : pour la gestion des chemins de fichiers.
- matplotlib.pyplot : pour la visualisation des donn√©es.
- seaborn : pour la cr√©ation de graphiques.
Variables :
- DATA_DIR : chemin du r√©pertoire contenant les fichiers de donn√©es.
- CLUSTER_FILE : chemin du fichier CSV contenant les donn√©es de clusters.
- ELECTIONS_FILE : chemin du fichier CSV contenant les r√©sultats des √©lections.
- df_clusters : DataFrame contenant les donn√©es de clusters.
- df_votes : DataFrame contenant les r√©sultats des √©lections.
- df_merged : DataFrame fusionn√©e contenant les donn√©es de clusters et les votes exprim√©s.
- df_weights : DataFrame contenant les poids relatifs des clusters.
Sortie :
- Un fichier CSV contenant les poids relatifs des clusters.
- Des graphiques montrant l'√©volution des poids relatifs des clusters en termes de pourcentage de communes et de votes exprim√©s.

"""

import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns

# üìç Chemin des fichiers
DATA_DIR = "C:/Users/Admin.local/Documents/Projet_final_data/Piketty_data"
CLUSTER_FILE = os.path.join(DATA_DIR, "clusters_elections.csv")
ELECTIONS_FILE = os.path.join(DATA_DIR, "elections_fusionnees_cleaned_with_names.csv")

# üìå Chargement des fichiers
df_clusters = pd.read_csv(CLUSTER_FILE, sep=",", dtype={"codecommune": str})
df_votes = pd.read_csv(ELECTIONS_FILE, sep=",", dtype={"codecommune": str})

# üìå Fusion avec les votes pour r√©cup√©rer les votes exprim√©s
df_merged = df_clusters.merge(df_votes[["codecommune", "ann√©e", "exprimes"]], 
                              on=["codecommune", "ann√©e"], how="left")

# üìå Calcul des poids relatifs des clusters
df_weights = df_merged.groupby(["ann√©e", "cluster_1er_tour"]).agg(
    nb_communes=("codecommune", "count"),
    total_votes=("exprimes", "sum")
).reset_index()

# ‚úÖ **Correction : r√©indexation apr√®s l'op√©ration groupby().apply()**
df_weights["pct_communes"] = df_weights.groupby("ann√©e")["nb_communes"].apply(lambda x: x / x.sum() * 100).reset_index(drop=True)
df_weights["pct_votes"] = df_weights.groupby("ann√©e")["total_votes"].apply(lambda x: x / x.sum() * 100).reset_index(drop=True)

# üìå Affichage du tableau
# Sauvegarde du tableau dans un fichier CSV
output_file = os.path.join(DATA_DIR, "poids_relatif_clusters.csv")
df_weights.to_csv(output_file, index=False)
print(f"‚úÖ R√©sultats enregistr√©s dans : {output_file}")

# Affichage des 10 premi√®res lignes en console pour v√©rification
print(df_weights.head(10))

# üìå Visualisation des tendances
fig, axes = plt.subplots(1, 2, figsize=(14, 6), sharex=True)

# üìä √âvolution du % de communes par cluster
sns.lineplot(data=df_weights, x="ann√©e", y="pct_communes", hue="cluster_1er_tour", marker="o", ax=axes[0], palette="tab10")
axes[0].set_title("√âvolution du % de communes par cluster")
axes[0].set_ylabel("Pourcentage des communes")
axes[0].set_xlabel("Ann√©e")
axes[0].legend(title="Cluster")

# üìä √âvolution du % de votes exprim√©s par cluster
sns.lineplot(data=df_weights, x="ann√©e", y="pct_votes", hue="cluster_1er_tour", marker="o", ax=axes[1], palette="tab10")
axes[1].set_title("√âvolution du % des votes exprim√©s par cluster")
axes[1].set_ylabel("Pourcentage des votes exprim√©s")
axes[1].set_xlabel("Ann√©e")
axes[1].legend(title="Cluster")

# üìå Ajustement et affichage
plt.suptitle("Poids relatif des clusters au fil des √©lections", fontsize=14)
plt.tight_layout()
plt.show()
