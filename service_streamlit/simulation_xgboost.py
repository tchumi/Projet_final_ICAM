"""
Ce script Streamlit permet de simuler les r√©sultats du 1er tour des √©lections en utilisant un mod√®le XGBoost.
Fonctionnalit√©s :
- Chargement des donn√©es √©lectorales et socio-√©conomiques.
- Entra√Ænement d'un mod√®le XGBoost sur les donn√©es jusqu'√† une ann√©e s√©lectionn√©e.
- Sauvegarde du mod√®le entra√Æn√©.
- Chargement d'un mod√®le pr√©-entra√Æn√© pour effectuer des simulations.
- Interface utilisateur pour ajuster les param√®tres socio-√©conomiques et simuler les r√©sultats √©lectoraux.
- Affichage des r√©sultats r√©els et simul√©s sous forme de camemberts pour chaque cluster.
Biblioth√®ques utilis√©es :
- streamlit : pour cr√©er l'interface utilisateur interactive.
- pandas : pour la manipulation des donn√©es.
- xgboost : pour l'entra√Ænement et l'utilisation du mod√®le XGBoost.
- numpy : pour les op√©rations num√©riques.
- matplotlib : pour la visualisation des r√©sultats.
- os : pour v√©rifier l'existence du fichier de mod√®le sauvegard√©.
Variables principales :
- data_path : chemin vers le fichier CSV contenant les donn√©es originales.
- model_path : chemin vers le fichier de sauvegarde du mod√®le XGBoost.
- features_1er_tour : liste des caract√©ristiques utilis√©es pour l'entra√Ænement du mod√®le.
- vote_columns : liste des colonnes repr√©sentant les votes pour chaque orientation politique.
- vote_labels : liste des √©tiquettes correspondant aux orientations politiques.
Interface utilisateur :
- S√©lection de l'ann√©e d'entra√Ænement.
- Bouton pour entra√Æner le mod√®le.
- V√©rification de l'existence d'un mod√®le pr√©-entra√Æn√©.
- S√©lection de l'ann√©e pour la simulation.
- Sliders pour ajuster les param√®tres socio-√©conomiques.
- Bouton pour lancer la simulation.
- Affichage des r√©sultats sous forme de camemberts comparant les votes r√©els et simul√©s pour chaque cluster.

"""

import streamlit as st
import pandas as pd
import xgboost as xgb
import numpy as np
import matplotlib.pyplot as plt
import os

# üìÇ Chargement des donn√©es originales
data_path = "C:/Users/Admin.local/Documents/Projet_final_data/Piketty_data/elections_socio_fusionnes.csv"
df = pd.read_csv(data_path, dtype={"codecommune": str, "ann√©e": int})

# üìÇ D√©finition du chemin de sauvegarde du mod√®le
model_path = "C:/Users/Admin.local/Documents/Projet_final_data/XGBoost_model_1er_tour.json"


features_1er_tour = [
    'exprimes', 'revratio', 'pchom', 'pouvr', 'pcadr', 'pibratio'
]

vote_columns = ["pvoteG", "pvoteCG", "pvoteC", "pvoteCD", "pvoteD"]
vote_labels = ["Gauche", "Centre-Gauche", "Centre", "Centre-Droite", "Droite"]

# üéõÔ∏è Interface Streamlit
st.title("Simulation des R√©sultats du 1·µâ ≥ Tour avec XGBoost")

# üìå S√©lection de l‚Äôann√©e d'entra√Ænement
annee_train = st.selectbox("Jusqu'√† quelle ann√©e entra√Æner le mod√®le ?", [2002, 2007, 2012])

# üìå Bouton pour entra√Æner le mod√®le
if st.button("üöÄ Entra√Æner le Mod√®le XGBoost"):
    st.write(f"üìä Entra√Ænement du mod√®le sur les √©lections jusqu‚Äôen {annee_train}...")

    df_train = df[df["ann√©e"] <= annee_train]
    X_train, y_train = df_train[features_1er_tour], df_train[vote_columns]

    model = xgb.XGBRegressor(objective="reg:squarederror", n_estimators=100, learning_rate=0.1, max_depth=6)
    model.fit(X_train, y_train)

    model.save_model(model_path)
    st.success(f"‚úÖ Mod√®le entra√Æn√© et sauvegard√© dans : {model_path}")

# üìå V√©rifier si un mod√®le pr√©-entra√Æn√© existe
if os.path.exists(model_path):
    model = xgb.XGBRegressor()
    model.load_model(model_path)
    st.success("‚úÖ Mod√®le charg√© avec succ√®s ! Vous pouvez faire une simulation.")

    # üìå S√©lection de l‚Äôann√©e pour la simulation
    annee_simulee = st.selectbox("Choisissez une ann√©e pour la simulation :", [2017, 2022])

    # üìå Filtrage des donn√©es pour la simulation
    df_simulation = df[df["ann√©e"] == annee_simulee].copy()

    # üìå Ajout des sliders pour modifier les variables
    st.subheader("üéõÔ∏è Ajustez les param√®tres pour simuler un sc√©nario")

    exprimes_modif = st.slider("üìä Variation de la participation (%)", -30, 30, 0)
    revratio_modif = st.slider("üí∞ Variation du revenu moyen (%)", -100, 300, 0)
    pchom_modif = st.slider("üìâ Variation du taux de ch√¥mage (%)", -100, 300, 0)
    pouv_modif = st.slider("üìà Variation du taux d‚Äôouvriers (%)", -100, 300, 0)
    pcadr_modif = st.slider("üëî Variation du taux de cadres (%)", -100, 300, 0)
    pibratio_modif = st.slider("üíµ Variation du PIB ratio (%)", -100, 300, 0)

    # üìå Bouton pour lancer la simulation
    if st.button("üîÑ Lancer la Simulation"):
        # üìå Mise √† jour du dataframe simul√© avec les valeurs modifi√©es
        df_simulation["exprimes"] *= (1 + exprimes_modif / 100)
        df_simulation["revratio"] *= (1 + revratio_modif / 100)
        df_simulation["pchom"] *= (1 + pchom_modif / 100)
        df_simulation["pouvr"] *= (1 + pouv_modif / 100)
        df_simulation["pcadr"] *= (1 + pcadr_modif / 100)
        df_simulation["pibratio"] *= (1 + pibratio_modif / 100)

        # üìå Pr√©diction avec XGBoost sur la simulation
        X_simulation = df_simulation[features_1er_tour]
        y_pred_simulation = model.predict(X_simulation)

        # üìå Normalisation pour que la somme des votes fasse bien 100 %
        y_pred_simulation = (y_pred_simulation.T / y_pred_simulation.sum(axis=1)).T * 100

        # üìä Comparaison des r√©sultats par cluster
        clusters = df_simulation["cluster_corrige_1er_tour"].unique()
        fig, ax = plt.subplots(len(clusters), 2, figsize=(10, 5 * len(clusters)))

        for i, cluster in enumerate(clusters):
            df_cluster = df_simulation[df_simulation["cluster_corrige_1er_tour"] == cluster]
            y_pred_cluster = y_pred_simulation[df_simulation["cluster_corrige_1er_tour"] == cluster]
            
            # üìä Agr√©gation des votes pond√©r√©e par exprimes
            votes_reels = (df_cluster[vote_columns].multiply(df_cluster["exprimes"], axis=0)).sum()
            votes_simules = (y_pred_cluster * df_cluster["exprimes"].values[:, np.newaxis]).sum(axis=0)
            
            # üìå Camembert des r√©sultats r√©els
            ax[i, 0].pie(votes_reels, labels=vote_labels, autopct='%1.1f%%', startangle=140)
            ax[i, 0].set_title(f"Cluster {cluster} - R√©el")

            # üìå Camembert des r√©sultats simul√©s
            ax[i, 1].pie(votes_simules, labels=vote_labels, autopct='%1.1f%%', startangle=140)
            ax[i, 1].set_title(f"Cluster {cluster} - Simul√©")

        # Affichage des graphiques
        st.pyplot(fig)
