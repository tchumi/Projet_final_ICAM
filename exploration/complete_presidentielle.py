"""
Ce script enrichit les fichiers CSV des r√©sultats des √©lections pr√©sidentielles fran√ßaises avec des informations suppl√©mentaires sur les votes du second tour par famille politique.
Fonctionnalit√©s principales :
1. D√©tection des fichiers CSV des √©lections dans un r√©pertoire donn√©.
2. Enrichissement des fichiers CSV avec des colonnes suppl√©mentaires pour les votes du second tour par famille politique.
3. V√©rification de la coh√©rence des totaux des votes.
4. Sauvegarde des fichiers enrichis dans un r√©pertoire de sortie.
Variables globales :
- base_dir : Chemin du r√©pertoire contenant les donn√©es des √©lections.
- output_dir : Chemin du r√©pertoire o√π les fichiers enrichis seront sauvegard√©s.
- familles_politique_t2 : Dictionnaire des regroupements politiques pour le second tour des √©lections.
Fonctions :
- detect_elections(base_dir) : D√©tecte les fichiers CSV des √©lections dans le r√©pertoire de base.
- enrich_election_data(file_path, election_year) : Enrichit un fichier CSV avec les votes du second tour par famille politique.
Utilisation :
1. D√©finir le chemin du r√©pertoire de base contenant les donn√©es des √©lections.
2. Ex√©cuter le script pour d√©tecter et enrichir les fichiers CSV des √©lections.
3. Les fichiers enrichis seront sauvegard√©s dans le r√©pertoire de sortie sp√©cifi√©.
Exemple d'ex√©cution :

"""

import os
import pandas as pd

# Chemins des r√©pertoires
base_dir = "C:/Users/Admin.local/Documents/Projet_final_data/Piketty_data"
#base_dir = "D:/Projet_final_data/Piketty_data"

output_dir = os.path.join(base_dir, "enriched_data")
os.makedirs(output_dir, exist_ok=True)

# Dictionnaire des regroupements politiques pour le 2nd tour
familles_politique_t2 = {
    "2022": {"MACRON": "C", "MLEPEN": "ED"},
    "2017": {"MACRON": "C", "MLEPEN": "ED"},
    "2012": {"HOLLANDE": "G", "SARKOZY": "D"},
    "2007": {"SARKOZY": "D", "ROYAL": "G"},
    "2002": {"CHIRAC": "D", "LEPEN": "ED"},
    "1995": {"CHIRAC": "D", "JOSPIN": "G"},
    "1988": {"MITTERRAND": "G", "CHIRAC": "D"},
    "1981": {"MITTERRAND": "G", "GISCARDDESTAING": "CD"},
    "1974": {"GISCARDDESTAING": "CD", "MITTERRAND": "G"},
    "1969": {"POMPIDOU": "D", "POHER": "C"},
    "1965": {"DEGAULLE": "D", "MITTERRAND": "G"},
}


# Fonction pour d√©tecter les fichiers CSV des √©lections
def detect_elections(base_dir):
    elections = {}
    for folder in os.listdir(base_dir):
        if folder.startswith("pres") and folder.endswith("_csv"):
            folder_path = os.path.join(base_dir, folder)
            for file in os.listdir(folder_path):
                if file.endswith(".csv"):
                    elections[folder] = os.path.join(folder_path, file)
    return elections


# D√©tecte les fichiers √©lectoraux disponibles
election_files = detect_elections(base_dir)


# Fonction pour enrichir les fichiers CSV avec les votes du 2nd tour par famille politique
def enrich_election_data(file_path, election_year):
    try:
        df = pd.read_csv(file_path, sep=",", dtype=str)
        columns = df.columns.tolist()

        # V√©rifier si les donn√©es du second tour existent
        if "exprimesT2" not in columns:
            print(f"‚ö†Ô∏è Aucun second tour d√©tect√© dans {file_path}. Ignor√©.")
            return

        df["exprimesT2"] = (
            pd.to_numeric(df["exprimesT2"], errors="coerce").fillna(0).astype(int)
        )

        # Initialisation des nouvelles colonnes avec des valeurs par d√©faut
        for famille in ["ED", "D", "CD", "C", "G"]:
            df[f"voteT2_{famille}"] = 0
            df[f"pvoteT2_{famille}"] = 0.0  # Force en float
            df[f"pvoteT2_{famille}ratio"] = 0.0  # Force en float

        # Attribution des votes aux familles politiques, ligne par ligne
        for candidat, famille in familles_politique_t2.get(election_year, {}).items():
            voix_col = f"voixT2{candidat.upper()}"
            pvoix_col = f"pvoixT2{candidat.upper()}"
            pvoix_ratio_col = f"pvoixT2{candidat.upper()}ratio"

            vote_col = f"voteT2_{famille}"
            pvote_col = f"pvoteT2_{famille}"
            pvote_ratio_col = f"pvoteT2_{famille}ratio"

            if voix_col in df.columns:
                df[voix_col] = (
                    pd.to_numeric(df[voix_col], errors="coerce").fillna(0).astype(int)
                )
                df[vote_col] = df[voix_col]

            if pvoix_col in df.columns:
                df[pvoix_col] = (
                    pd.to_numeric(df[pvoix_col], errors="coerce")
                    .fillna(0)
                    .astype(float)
                )
                df[pvote_col] = df[pvoix_col]

            if pvoix_ratio_col in df.columns:
                df[pvoix_ratio_col] = (
                    pd.to_numeric(df[pvoix_ratio_col], errors="coerce")
                    .fillna(0)
                    .astype(float)
                )
                df[pvote_ratio_col] = df[pvoix_ratio_col]

        # Suppression des anciennes colonnes `voixT2_x` et `pvoixT2_x`
        old_columns = [
            col
            for col in df.columns
            if col.startswith("voixT2") or col.startswith("pvoixT2")
        ]
        df.drop(columns=old_columns, inplace=True, errors="ignore")

        # V√©rification de la coh√©rence des totaux
        df["voteT2_total"] = (
            df["voteT2_ED"]
            + df["voteT2_D"]
            + df["voteT2_CD"]
            + df["voteT2_C"]
            + df["voteT2_G"]
        )
        ecart = abs(df["voteT2_total"].sum() - df["exprimesT2"].sum())

        if ecart > 1:
            print(f"‚ö†Ô∏è **√âcart d√©tect√© pour {election_year}** : {ecart} voix")

        # Sauvegarde du fichier enrichi
        output_file = os.path.join(output_dir, f"pres{election_year}_enriched.csv")
        df.to_csv(output_file, index=False, sep=",", encoding="utf-8")
        print(f"‚úÖ Fichier enrichi sauvegard√© : {output_file}")

    except Exception as e:
        print(f"‚ùå Erreur lors de l'enrichissement du fichier {file_path}: {e}")


# Parcours et enrichissement des fichiers √©lectoraux
for election, file_path in election_files.items():
    year = election.replace("pres", "").replace("_csv", "")
    enrich_election_data(file_path, year)

print(f"üéØ Tous les fichiers ont √©t√© enrichis et sont disponibles dans {output_dir}")
