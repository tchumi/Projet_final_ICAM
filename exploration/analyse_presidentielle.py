"""
Ce script analyse les fichiers √©lectoraux des √©lections pr√©sidentielles pour v√©rifier certaines hypoth√®ses concernant les votes du premier et du second tour.
Fonctions:
    detect_elections(base_dir):
        D√©tecte les fichiers CSV des √©lections pr√©sidentielles dans le r√©pertoire sp√©cifi√©.
    analyze_election(file_path, election_year):
        Analyse un fichier √©lectoral pour v√©rifier les hypoth√®ses sur les votes du premier et du second tour.
Variables:
    base_dir (str): Chemin du dossier contenant les donn√©es √©lectorales.
    synthese (list): Liste pour stocker la synth√®se des analyses.
    election_files (dict): Dictionnaire contenant les chemins des fichiers √©lectoraux d√©tect√©s.
√âtapes principales:
    1. D√©tection des fichiers √©lectoraux disponibles.
    2. Analyse des fichiers √©lectoraux pour v√©rifier les hypoth√®ses.
    3. Stockage des r√©sultats de l'analyse dans un fichier de synth√®se.

"""

import os
import pandas as pd

# Chemin du dossier contenant les donn√©es √©lectorales
base_dir = "D:/Projet_final_data/Piketty_data"

# Liste pour stocker la synth√®se
synthese = []


# Fonction pour d√©tecter les fichiers CSV des √©lections
def detect_elections(base_dir):
    elections = {}
    for folder in os.listdir(base_dir):
        if folder.startswith("pres") and folder.endswith("_csv"):
            folder_path = os.path.join(base_dir, folder)
            for file in os.listdir(folder_path):
                if file.endswith(".csv"):
                    elections[folder] = os.path.join(folder_path, file)
    return elections


# D√©tecte les fichiers √©lectoraux disponibles
election_files = detect_elections(base_dir)


# Fonction pour analyser les fichiers √©lectoraux
def analyze_election(file_path, election_year):
    try:
        df = pd.read_csv(file_path, sep=",", dtype=str)
        columns = df.columns.tolist()

        # V√©rification de la pr√©sence des colonnes n√©cessaires
        required_columns = ["voteTG", "voteTD", "exprimes"]
        has_second_tour = (
            "exprimesT2" in columns
        )  # V√©rifier si le second tour est disponible

        if not all(col in columns for col in required_columns):
            synthese.append(
                f"‚ö†Ô∏è **√âlection {election_year} : Colonnes manquantes pour l'analyse**"
            )
            return

        # Conversion des colonnes en num√©riques
        for col in required_columns:
            df[col] = pd.to_numeric(df[col], errors="coerce")

        if has_second_tour:
            df["exprimesT2"] = pd.to_numeric(df["exprimesT2"], errors="coerce")

        # Calcul des totaux
        total_tg_td = df["voteTG"].sum() + df["voteTD"].sum()
        total_exprimes = df["exprimes"].sum()
        total_exprimes_t2 = df["exprimesT2"].sum() if has_second_tour else 0

        # V√©rification de l'√©galit√© entre TG+TD et exprimes (1er tour)
        ecart_1er_tour = abs(total_tg_td - total_exprimes)

        # V√©rification de l'√©galit√© entre TG+TD et exprimes (2 tours cumul√©s)
        ecart_total_tours = (
            abs(total_tg_td - (total_exprimes + total_exprimes_t2))
            if has_second_tour
            else 0
        )

        # Stockage de la synth√®se pour cette √©lection
        synthese.append(f"üó≥Ô∏è **√âlection {election_year}**")
        synthese.append(f"üìÇ Fichier : {file_path}")

        # Hypoth√®se : TG + TD doit √™tre √©gal aux voix du 1er tour
        if ecart_1er_tour < 1:
            synthese.append(
                f"üîπ Hypoth√®se 4 (TG + TD totalise les voix du 1er tour) : ‚úÖ V√©rifi√©e"
            )
        else:
            synthese.append(
                f"üîπ Hypoth√®se 4 (TG + TD totalise les voix du 1er tour) : ‚ö†Ô∏è √âcart d√©tect√© : {ecart_1er_tour:,.0f} voix"
            )

        # Hypoth√®se : TG + TD ne doit PAS totaliser les 2 tours
        if has_second_tour:
            if ecart_total_tours > 1:
                synthese.append(
                    f"üîπ Hypoth√®se 5 (TG + TD inclut le 2nd tour ?) : ‚úÖ V√©rifi√©e (pas de m√©lange)"
                )
            else:
                synthese.append(
                    f"üîπ Hypoth√®se 5 (TG + TD inclut le 2nd tour ?) : ‚ö†Ô∏è **Probl√®me d√©tect√©** : il semble y avoir un m√©lange 1er et 2nd tour."
                )

        synthese.append("\n" + "-" * 80 + "\n")

    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse du fichier {file_path}: {e}")


# Parcours et analyse des fichiers √©lectoraux
for election, file_path in election_files.items():
    year = election.replace("pres", "").replace("_csv", "")
    analyze_election(file_path, year)

# Sauvegarde du fichier de synth√®se dans le r√©pertoire courant du script
output_file = os.path.join(os.getcwd(), "presidentiel_verif_tours.txt")
with open(output_file, "w", encoding="utf-8") as f:
    f.write("\n".join(synthese))

print(f"‚úÖ Analyse termin√©e ! R√©sultats enregistr√©s dans {output_file}")
